import sys
import binascii
from struct import *
from Crypto.Hash import SHA256
from Crypto.Cipher import AES
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5 as PKCS

def Sign(fwpath, header, method):

    file = open(fwpath, "rb")
    fwdata = file.read()
    file.close()

    myHash = SHA256.new()
    myHash.update(fwdata)
    m = myHash.digest()
    print("     Hash= " + binascii.b2a_hex(m))

    if method == 'AES':
        key = b'\xb3\x34\x53\x77\6b\xee\x85\xc7\x58\x46\x80\x36\x26\x78\xc7\x57\x57\xa3\xef\x52\x7f\x65\x36\xa5\xcf\xa8\x75\x7c\xa8\x5f\xe7\x57'
        iv = b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f'

        obj = AES.new(key, AES.MODE_CBC, iv)
        ciphertext = obj.encrypt(m)
        print("signature= " + binascii.b2a_hex(ciphertext))

        obj2 = AES.new(key, AES.MODE_CBC, iv)
        plaintext = obj2.decrypt(ciphertext)

        if plaintext != m:
            print ("Invalid Signature!!!")
            sys.exit(1)

    elif method == 'RSA':
        ciphertext = b'\x53\x25\x3f\x75\xa0\x89\xd6\xa7\xe1\x1b\x6f\xbb\x3e\x50\xe5\xaf\xa1\x7e\x89\xc7\x2c\xd8\x77\x44\x2c\x7a\xe9\xad\x34\x15\x29\xc7\
\x73\xe4\xd1\x6d\x2f\xcd\xd6\xca\xd9\x63\x7a\xd9\x79\x43\xf5\xea\xdd\xa4\x94\xf2\xe7\x73\x67\x45\xe0\x74\x5c\xb5\xb8\xa5\x1f\xec\
\xc0\x8e\xae\x28\xaf\x61\x95\xe1\x9a\xc9\xd4\x99\x25\x8b\x03\x47\xf7\x18\xa8\x83\xf1\xfa\x69\x00\x21\x67\x76\x38\x71\x97\xe1\xea\
\x35\x79\x05\xe1\x13\x42\x5e\x3a\xc9\x44\x96\xca\xe0\x78\x47\x31\x31\x86\x96\xf1\x8b\x49\x4b\x3d\xe4\x39\x82\x21\xc9\xc3\x62\x08\
\x6e\xb3\xae\x43\x3f\xdf\x52\xdd\xe7\xcb\x26\xcc\x38\x3b\xf7\x36\x12\x7d\x59\xcb\xa5\x2e\x2f\x96\x80\xa0\x8f\xed\x5a\xbe\x1b\xa1\
\x2e\x44\xce\x3f\xba\x56\xe6\x12\x67\x1d\x59\xd6\x0c\xff\x5a\xed\x5e\xd3\xac\xa9\x51\x43\x0c\xfe\x97\x38\x32\xe4\x47\x4b\x2d\x05\
\xde\xfa\x0f\x4c\x89\x47\x96\xb3\x0d\x9e\x2d\x75\x60\xa7\xf1\x29\x4d\x89\x6a\x21\xde\x28\x45\xcd\x81\x8c\x39\x9f\xe8\xee\x79\x91\
\x36\x4e\xd7\x12\xbf\xf3\xaa\x5f\xaa\xe0\xc1\xc0\x33\x6d\x25\x31\x90\xad\x61\xd1\xb2\x6a\xb3\xb9\x3a\xbf\x65\x92\x6f\x55\x53\x2f\
\x5f\x31\x2d\xd3\xba\x77\xe7\x48\x2f\x91\x2e\x02\xdb\x49\x5b\x64\x63\x3a\xb6\xda\xfa\xbf\x0c\x65\xa2\x2b\xe8\xd6\x4c\x24\xd0\x43\
\xc2\x46\x62\xe2\x56\xa1\x9a\x0e\xdf\x84\xf3\xd1\x03\xcb\x3b\xdb\xb1\xc1\x29\x39\x76\x54\x1f\x52\xd3\xef\xd6\x10\xa9\xa1\x3d\xa0\
\x01\x61\x3b\x5e\x5c\x39\x29\x61\xbf\x16\x98\x6d\xbc\xcf\x22\xb9\xc0\x29\xf7\xd9\xdf\xc0\x1b\xcb\x7d\x75\xca\xd9\x63\xa8\xf4\xa1\
\xf0\xc4\x3b\x13\x1a\x71\x9a\x79\xa7\xbf\x93\x75\xde\x12\x77\x02\x80\xaa\x7f\xc9\x54\xd4\xff\xf5\xd4\xf0\x53\x80\x57\xd8\xfa\xa8\
\x9e\xc7\x7e\x80\x53\x70\x87\x41\x3e\xe8\xf3\xa1\xb3\x8d\xe1\xde\x45\x1e\xc5\xa1\xf8\x3f\x9c\x68\x6d\xe8\xd7\x99\x09\x65\x0b\x87\
\xf6\x86\xe3\x22\x60\x7f\x23\xe2\xd3\xac\xd6\x04\x3d\xc3\xaf\xc4\x4c\xf2\xd4\x64\xb4\x9a\x0b\xe8\x74\x25\x90\xc0\xc6\x26\x6c\x96\
\xf2\xc5\x32\xbd\x51\xf0\x0a\xec\xe0\x4c\x25\x8c\xfa\x7c\xb1\x1e\xa9\x40\x65\x08\x1a\xb6\x3b\x78\x23\x39\x7e\xd8\x6a\xa1\x1f\x5e\
\xb0\x92\xdf\x10\x06\xa7\x0c\x10\x9a\xc2\x0c\xd7\xef\x35\xa6\xa5\x2f\x50\xbf\x24\x0d\xf8\x92\xf8\x5f\x05\xb1\x96\x5b\xc2\x1d\xac\
\xa7\xf1\xbe\x49\x6e\xc5\x44\x99\xb5\x5f\xa0\xed\xd8\x1c\x55\xc5\x8d\x43\x4d\x4d\xbd\x5b\x0d\xb5\x56\xe2\x67\xbd\x6e\xe7\x83\xc2\
\xd1\xcb\x9c\x56\x56\x33\xf4\x4e\xfa\x53\x88\xc1\x09\xe3\xf8\x24\xa8\x6b\x63\xb6\x9c\xd3\xce\xe3\x15\xd8\xb1\xb2\xec\x1f\x31\x4d\
\x46\xe9\xdb\x2d\x7a\x77\x07\x75\x37\x71\x05\x7d\xee\x00\xc4\x5d\x9a\x9f\xc4\xc0\x3b\x00\xcb\xc4\x5e\xc2\x49\x91\x29\xae\x17\x45\
\xc2\xd3\x3d\x9b\xa2\xd7\x3d\x7b\x4b\xc1\xaa\xe3\xa8\xf5\xc6\x2b\xb5\x2a\xc2\xa2\xa9\xe8\x1e\xe0\xe5\xaf\xe9\x35\xfe\x19\xe3\x2d\
\x1f\x64\x45\x47\x06\x24\xa8\x76\x82\x9e\x5d\xa4\xf5\x8d\xde\x95\xe7\xb6\xe7\xad\x67\x52\xe1\x47\xed\xf3\xbd\x2e\xcc\x59\x8b\x52\
\x20\x81\x69\xe2\xcf\x27\x55\x64\xf1\x39\x51\xf0\x8e\xb9\x69\x18\xdd\x9a\xf6\x33\x2d\x33\x1a\x6d\xf0\x7f\xca\x5c\xfe\x6b\x10\xf2\
\x79\xd9\x54\xa4\xa6\x39\xe3\xa5\x0d\x83\xd8\xfb\x79\x31\xc9\x60\xa1\x0e\x6c\xfc\x10\xc1\xff\x9b\x43\xe3\x8f\x10\xc3\x1e\x6b\x35\
\x08\x13\xe1\x54\xd5\x3c\x83\xba\xfe\xa2\xd1\x0f\x38\xb2\x6b\x19\xb0\xd3\x6d\x12\xd0\x05\x13\x53\x1c\x79\x7f\x98\x19\x12\x87\x52\
\x06\xed\xbc\x20\x8c\xed\xb0\x9e\x5b\x33\x41\x00\xf1\xe6\x4b\xc3\x91\xaa\x64\x63\x66\xfd\xdf\x33\x7c\x73\xa9\xb2\xe3\x18\x3f\x12\
\x13\x8f\xed\x89\x41\x89\xa3\x45\x6a\x3e\x15\x2c\x88\x42\x99\xe3\xe8\x33\x2e\xa7\x5b\xf8\x3c\xf7\x04\x5b\x44\x7b\x66\x10\x0a\x05\
\x64\xa5\x2f\xeb\x19\x69\xba\x30\x75\x1e\x00\x20\xb8\x16\xb6\x09\xba\x98\x83\x4a\xaf\x05\xd2\xcb\x61\x5a\xeb\xf4\xc8\xeb\x7d\x77\
\x0f\xb4\x0a\xc5\x80\x11\x80\xce\x65\x23\x96\xca\x3a\xee\x49\x05\xa7\x1b\x50\x08\x15\xda\x78\x8b\x65\xeb\x5b\x41\xd9\x22\xe4\x75\
\x6d\x8d\x79\x4f\xea\x7b\xe1\xdc\xf7\xfc\x5a\x71\x73\x61\xef\xb5\x22\x08\xf5\xf6\xb3\x2f\x78\xdc\x04\xb8\x27\x05\x12\xf9\x76\x61\
\xf2\x92\x18\x56\x08\x9b\x31\xea\x3a\x1d\xd6\x91\xab\x09\x9d\x7c\x2e\x57\x5c\x92\xae\xc0\xf8\x2e\x6a\x52\xab\xe8\x36\x59\x95\xa4\
\xea\xc5\x02\xc1\x84\x6a\xdc\x58\xb3\x80\x98\xaf\x2e\xe3\xc5\x6f\x58\x9d\x4b\xf7\x53\x80\xe9\x93\xd8\x48\x9f\x93\xad\xb2\x5b\x9a\
\x42\xb6\xb6\xe7\x10\x4d\xcc\x86\x4c\xde\x45\x7c\x21\x89\xd8\xcb\x72\x0a\x19\x18\xaa\x4e\xeb\x80\x61\xe6\xe0\xe5\xc9\x60\x65\x62\
\x67\xff\xaf\xd2\x69\xb8\xa7\x3d\x89\x44\x9f\x35\x7f\x40\x22\x64\xfc\xde\xcc\xc7\x47\x10\xf0\x3e\x72\xe1\xa3\xa6\xbc\x12\xa6\x89\
\x78\xc1\x72\x8e\x9b\xbb\x5e\x07\xfe\x82\x88\xcb\x6e\xf8\x2b\xb5\x2d\xe8\x12\x97\x3a\xe0\xfc\x60\xb1\x0a\x84\xf8\x04\xe1\xed\xb1\
\xec\xa0\xf1\xd3\x6a\x0c\x8f\x34\x90\xfb\x6f\x4a\xec\x38\x0d\xf9\xd2\x1a\x87\x0e\x93\x57\xcb\x8c\xbb\x0b\x1f\x98\x6e\x7d\xbf\xc6\
\x8c\x99\x16\x26\xa1\x3f\x17\xf2\xfd\x53\x9b\xed\x74\x53\xd2\x1e\xcc\xc5\x87\x7e\x62\xeb\x06\xd9\x87\x68\x1d\x08\x68\xee\xfb\x64\
\xb8\x84\x81\xeb\x5f\x64\xc1\x5e\x30\xa3\x05\x08\x5b\xde\x26\x8f\x9f\xc8\x70\x05\xa5\xba\xb6\xcb\xd3\x9b\xe6\xdc\x0f\xd0\x6c\x26\
\xf8\x5f\x3c\x1e\x88\x90\x86\xc0\x05\xc3\x3a\x78\xfa\x04\x1a\xc4\xd4\x62\x55\x57\x59\x98\xa5\xd1\xfa\x36\x81\x5e\x4b\xda\x2a\x57\
\xa7\x60\x2a\xdd\xb6\x6d\x4d\x34\x72\xeb\x3e\x3e\x25\x6a\x39\xa7\x74\x57\x05\xbb\x4f\xd8\x15\xb7\x1d\x30\xfd\xc0\xd1\x16\x29\xa1\
\x4a\x47\x65\x8e\x13\x96\xeb\x40\x97\x24\xd8\x9b\xef\x4b\xb4\xd8\xb7\x9a\x20\xdf\xad\xf3\x70\x47\x8f\xba\x42\xda\x76\x97\x85\xe1\
\xcb\x39\x04\xbc\xbd\x03\xb2\x00\x81\xc6\xc2\xa0\xf4\x66\x4d\x17\x83\x2a\x37\x12\x04\xca\x52\x2a\x45\xc5\x74\x74\xc4\xa7\xb3\xbc\
\x49\xf9\x35\x21\xa6\xac\xef\xa0\xa1\x96\xee\x15\xbf\x56\x89\xe2\x53\x3e\xac\x49\xeb\x66\x3d\x57\x1c\xd9\x36\x12\xf3\x06\x35\x33\
\x23\xdf\xb1\xd5\xe3\x81\xea\x31\xf8\x6f\xbe\x0c\xbb\x67\xa1\xae\xd9\xb5\xe8\x1b\xe7\xc0\x3c\x76\x0a\x08\x7f\xd4\xbf\x90\x37\xa4\
\xc4\x10\x24\xca\x14\x6b\xd9\xec\x51\x94\x4e\xe9\x32\x30\x2a\x74\xf6\x67\x4d\x47\xcb\xcc\xed\x7b\x85\x1b\xb1\x4e\x7c\xc1\x38\x0e\
\xb1\x2b\x01\x3a\x3d\xcc\xd2\xaa\xbe\x0f\x4a\x6b\x2e\x38\x9c\x97\xb4\xde\x6e\x14\x05\x1b\x04\x22\x9c\x10\x61\x79\x0d\x0c\x1e\x2e\
\x30\x20\xdd\x39\x9e\x9a\xeb\x18\x9c\x08\x6c\x24\xe9\x79\x38\x98\x06\x8b\xa8\xef\x09\x4f\x6d\x7e\x73\x45\x9d\x66\x13\xf3\x98\x6c\
\x24\x82\xde\xda\xb3\xec\x0f\xce\xfd\x84\xa2\xa7\x2b\x8e\xf4\x56\x49\x8e\x39\xa5\xca\xac\x1e\x0e\x9f\xea\x01\x1a\x8c\xe4\xd5\x56\
\x8e\x30\x69\x2f\x5b\x5e\x1b\xb7\x7e\x69\xde\x57\x7f\xd7\x50\xf6\x94\x44\xca\x30\xf9\x85\x32\x8f\x9d\x54\xbb\xd9\xec\x67\xfb\x3c\
\xb3\xf5\xe5\xf1\xde\xa8\x10\xc1\x95\xba\xae\x49\xb2\x74\x17\xb6\x57\xb8\xa4\x93\xba\xb8\xd2\x31\xbd\x28\xa5\x68\xb6\xb8\x7a\x55\
\xdd\xac\x44\x87\xc2\x28\xbb\xf3\x15\x7f\xe0\x06\x96\x00\xb2\x56\x08\xb7\x75\xa5\xf9\x58\x2d\x62\xaf\xfe\x42\x56\xca\x36\x6e\xeb\
\xc9\xf2\xe7\x52\x47\x37\x2d\x88\x27\xfa\x5e\x50\xe4\x57\x99\x16\xf7\xd4\xe2\x12\x57\xae\x70\x1b\xd8\xb4\xae\x2a\x1c\x3f\x49\x3c\
\x02\xb2\x4f\x4e\x25\x4f\x62\x62\x6a\x52\x6b\x16\x20\x70\x98\x76\xc3\x05\x6d\x92\x6d\xd9\x96\xdc\xc2\x5d\xc9\x5a\x0a\x59\x10\xca\
\xfe\x85\x14\x5c\xca\xa5\x7a\xf3\x88\x51\x23\x98\x1d\x28\xce\xa2\x2b\x3a\x8f\x68\x8e\x52\x32\x43\x36\x11\x71\x52\xe7\xa6\x53\x12\
\x82\x3f\xa8\x3b\x9f\xea\x4e\x42\xde\x55\x27\x5a\x3d\xbb\xb3\xc9\x5c\xf0\x26\x32\x90\xf2\x1b\xe7\x15\x71\x89\xbb\xf2\x5e\x9a\xb4\
\x24\xc8\x85\xe4\x00\x24\x30\x5f\x06\x45\xf3\x40\x3d\xaa\xf0\xae\x8a\x7b\x59\x7d\xa4\x48\x15\xc4\xf0\x55\x4d\xae\xb9\x3a\x10\x37\
\xc1\xb8\xe7\x27\x77\x07\x5b\x99\xe3\x77\x8f\x9b\x7b\x77\xf4\x64\x3e\xb2\xa6\x73\x59\xcb'

        key = b'\xa3\x94\x93\x57\x9b\x5e\x8e\xd7\x53\x45\x80\x16\x25\x7f\xa7\x57\x52\xa4\xef\x50\xf7\x44\x16\xa0\xce\xa9\x76\x7c\xad\xbf\xe1\xb7'
        iv = b'\x00\x11\x22\x33\x44\x55\x66\x77\x88\x99\xaa\xbb\xcc\xdd\xee\xff'
        obj = AES.new(key, AES.MODE_CFB, iv)
        plaintext = obj.decrypt(ciphertext)
        myPrivKey = RSA.importKey(plaintext)

        signer = PKCS.new(myPrivKey)
        signature = signer.sign(myHash)
        print(" signer= ", signer)
        print("signature= "+binascii.b2a_hex(signature))

        # Verify
        h = SHA256.new(fwdata)
        while True:
            try:
                PKCS.new(myPrivKey).verify(h, signature)
                break
            except (ValueError, TypeError ):
                print ("Invalid Signature!!!")
                sys.exit(1)
    else:
        print ("LiteOn SSD Firmware signing tool v0.10")
        print ("Usage: Sign(firmware_path, input_header, [rsa|aes]")
        return

    if method == 'AES':
        header[28:32] = [0x00, 0x01, 0x00, 0x00]     #Key Size (in bits)
        header[32:36] = [0x00, 0x00, 0x00, 0x00]     #Modulus Size
        header[36:40] = [0x00, 0x00, 0x00, 0x00]     #Exponent Size
    else:
        header[28:32] = [0x00, 0x08, 0x00, 0x00]     #Key Size
        header[32:36] = [0x00, 0x00, 0x00, 0x00]     #Modulus Size
        header[36:40] = [0x00, 0x00, 0x00, 0x00]     #Exponent Size

    if method == 'AES':
        header[128:388] = [0x55] * 260
        header[388:388+len(ciphertext)] = ciphertext
    else:
        #reverse KeyN's byte order, header[128:384] = bytearray.fromhex('{:512x}'.format(myPrivKey.n))
        fmt = '%%0%dx' %512
        s = binascii.a2b_hex(fmt %myPrivKey.n)
        s = s[::-1]
        header[128:384] = s
        header[384:388] = [0x01, 0x00, 0x01, 0x00]

        #swap Signature's byte order in UINT32 unit
        swapped = [0xFF]*256
        i = 0
        while (i < 256):
            swapped[i+3] = signature[i]
            swapped[i+2] = signature[i+1]
            swapped[i+1] = signature[i+2]
            swapped[i] = signature[i+3]
            i += 4
        header[388:388+len(signature)] = swapped   #signature
